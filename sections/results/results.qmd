---
title: Results
output: index
jupyter: python3
header-includes:
  - \setcounter{page}{5}  
html:
    code-fold: true
---

### FROM OPENIVIS REPORT, LEFT TO SHOW HOW TO DO CODE BLOCKS AND SHOW RESULTS
#### Read and Plot Exposure Values {.unnumbered}
```{python}
#| code-fold: true
#| code-summary: "Show code from exposure_analysis.py"

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

data1 = pd.read_excel("Data/exposure/lastExposure1.xlsx", sheet_name="Sheet2")
data2 = pd.read_excel("Data/exposure/lastExposure2.xlsx", sheet_name="Sheet2")
data3 = pd.read_excel("Data/exposure/lastExposure3.xlsx", sheet_name="Sheet2")
data4 = pd.read_excel("Data/exposure/lastExposure4.xlsx", sheet_name="Sheet2")
data5 = pd.read_excel("Data/exposure/lastExposure5.xlsx", sheet_name="Sheet2")

# For Exposure Times
data1_subsets = [data1.iloc[i:i+8].values.flatten() for i in range(0, 45, 9)]
data2_subsets = [data2.iloc[i:i+8].values.flatten() for i in range(0, 45, 9)]
data3_subsets = [data3.iloc[i:i+8].values.flatten() for i in range(0, 45, 9)]
data4_subsets = [data4.iloc[i:i+8].values.flatten() for i in range(0, 45, 9)]
data5_subsets = [data5.iloc[i:i+8].values.flatten() for i in range(0, 45, 9)]

# Calculate means and std for each subset
m_data1 = np.array([np.mean(subset) for subset in data1_subsets])
m_data2 = np.array([np.mean(subset) for subset in data2_subsets])
m_data3 = np.array([np.mean(subset) for subset in data3_subsets])
m_data4 = np.array([np.mean(subset) for subset in data4_subsets])
m_data5 = np.array([np.mean(subset) for subset in data5_subsets])

s_data1 = np.array([np.std(subset) for subset in data1_subsets])
s_data2 = np.array([np.std(subset) for subset in data2_subsets])
s_data3 = np.array([np.std(subset) for subset in data3_subsets])
s_data4 = np.array([np.std(subset) for subset in data4_subsets])
s_data5 = np.array([np.std(subset) for subset in data5_subsets])
# 
# Combine means and std of each numbered data
means = np.mean([m_data1, m_data2, m_data3, m_data4, m_data5], axis=0)

stds = np.std([s_data1, s_data2, s_data3, s_data4, s_data5], axis=0)

exp = [0.001, 0.005, 0.01, 0.05, 0.1]

plt.figure()
plt.errorbar(exp, means, yerr=stds, fmt='o', color='red', linewidth=2, markersize=6, label='Mean')
plt.title('Brightness Level = 0.7')
plt.suptitle('Pixel Intensity vs. Exposure Time')
plt.ylim([0, 1100])
plt.xlabel('Exposure Time [s]')
plt.ylabel('Pixel Intensity [a.u.]')
# Polynomial Fit
coeffs = np.polyfit(exp, means, 4)
y_fit = np.polyval(coeffs, exp)
plt.plot(exp, y_fit, 'r', linewidth=2)

plt.savefig('images/exposure.png')
plt.close()
```
::: {#fig-test-data}
![](./images/exposure.png)

The pixel intensity versus exposure time.
:::

::: {#fig-test-data}
![a. The photodiode pixel intensity versus color code for a brightness level of 1.](./images/photodiodeTuple.png)

![b. The photodiode pixel intensity versus brightness level for a color code of (0,0,0,255).](./images/photodiodeLevel.png)
:::
